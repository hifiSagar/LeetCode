bool isBipartite(int **G, int n, int *cols)
{
    int u = 0, v = 0;
    int top = 0;
    int *Q = calloc(n, sizeof(int));
    int *color = calloc(n, sizeof(int));
    int *visited = calloc(n, sizeof(int));
    int *enqueued = calloc(n, sizeof(int));
    for (int i = 0; i < n; i++)
    {
        if (visited[i]) continue;
        color[i] = 1;
        Q[top++] = i;
        
        while (top)
        {
            u = Q[--top];
            enqueued[u] = 0;
            visited[u] = 1;
            
            for (int j = 0; j < cols[u]; j++)
            {
                v = G[u][j];
                if (visited[v]) continue;
                
                if (color[u] == color[v]) return false;
                
                color[v] = -color[u];
                
                if (enqueued[v]) continue;
                
                Q[top++] = v;
                enqueued[v] = 1;
            }
        }
    }
    
    return true;
}

