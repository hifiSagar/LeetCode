typedef struct {
    int head, tail, count, size;
    int* q;
} MyCircularQueue;
MyCircularQueue* myCircularQueueCreate(int k) {
    MyCircularQueue* queue = malloc(sizeof *queue);
    queue->q = malloc(sizeof(int) * k);
    queue->head = queue->tail = queue->count = 0;
    queue->size = k;
    return queue;
}
bool myCircularQueueIsEmpty(MyCircularQueue* obj) {
    return obj->count == 0;
}
bool myCircularQueueIsFull(MyCircularQueue* obj) {
    return obj->count == obj->size;
}
int myCircularQueueFront(MyCircularQueue* obj) {
    if (myCircularQueueIsEmpty(obj)) return -1;
    return obj->q[obj->head]; 
}
int myCircularQueueRear(MyCircularQueue* obj) {
    if (myCircularQueueIsEmpty(obj)) return -1;
    int id = (obj->tail - 1 + obj->size) % obj->size;
    return obj->q[id];
}

void myCircularQueueFree(MyCircularQueue* obj) {
    free(obj);
}
bool myCircularQueueEnQueue(MyCircularQueue* obj, int value) {
    if (myCircularQueueIsFull(obj)) return false;
    obj->q[obj->tail] = value;
    obj->tail = (obj->tail+1) % obj->size;
    obj->count++;
    return true;
}
bool myCircularQueueDeQueue(MyCircularQueue* obj) {
    if (myCircularQueueIsEmpty(obj)) return false;
    obj->count--;
    obj->head = (obj->head + 1) % obj->size;
    return true;
}
