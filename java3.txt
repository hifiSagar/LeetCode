//3sum

import java.util.*;

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);  // Sort the array to use the two-pointer technique
        List<List<Integer>> output_arr = new LinkedList<>();

        for (int i = 0; i < nums.length - 2; i++) {
            // Skip duplicate values for i
            if (i == 0 || (i > 0 && nums[i] != nums[i - 1])) {
                int low = i + 1;
                int high = nums.length - 1;
                int sum = 0 - nums[i];  // We want to find pairs that sum to -nums[i]

                while (low < high) {
                    if (nums[low] + nums[high] == sum) {
                        output_arr.add(Arrays.asList(nums[i], nums[low], nums[high]));

                        // Skip duplicate values for low and high
                        while (low < high && nums[low] == nums[low + 1]) low++;
                        while (low < high && nums[high] == nums[high - 1]) high--;
                        low++;
                        high--;
                    } else if (nums[low] + nums[high] > sum) {
                        high--;  // Decrease the sum by moving high pointer to the left
                    } else {
                        low++;  // Increase the sum by moving low pointer to the right
                    }
                }
            }
        }

        return output_arr;
    }
}
