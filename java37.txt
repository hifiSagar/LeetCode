int arrayNesting(int* nums, int numsSize) {
    int maxLength = 0;  // Stores the maximum length of the chain found
    int visited[numsSize];  // To track visited elements
    memset(visited, 0, sizeof(visited));  // Initialize the visited array with 0 (false)
    
    // Iterate through each element in the array
    for (int i = 0; i < numsSize; i++) {
        if (!visited[i]) {  // If the current element hasn't been visited
            int currentIndex = i;
            int chainLength = 0;
            
            // Follow the chain of indices
            while (!visited[currentIndex]) {
                visited[currentIndex] = 1;  // Mark this index as visited
                currentIndex = nums[currentIndex];  // Move to the next index
                chainLength++;  // Increment the length of the chain
            }
            
            // Update maxLength if the current chain is longer
            if (chainLength > maxLength) {
                maxLength = chainLength;
            }
        }
    }
    
    return maxLength;  // Return the length of the longest chain
}
