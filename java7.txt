//min stack problem


class MinStack {

    // Define the Node class that holds the value and the current minimum at that point.
    private class Node {
        private int val;   // Value of the node
        private int min;   // Minimum value at that point in the stack
        private Node next; // Pointer to the next node

        private Node(int val, int min, Node next) {
            this.val = val;
            this.min = min;
            this.next = next;
        }
    }

    private Node head; // The top of the stack

    // Constructor
    public MinStack() {
        head = null;
    }

    // Pushes a new value onto the stack
    public void push(int val) {
        // If the stack is empty, the current value is the minimum
        if (head == null) {
            head = new Node(val, val, null);
        } else {
            // Push the value and update the minimum for this level
            head = new Node(val, Math.min(val, head.min), head);
        }
    }

    // Removes the top element from the stack
    public void pop() {
        if (head != null) {
            head = head.next;
        }
    }

    // Returns the top element of the stack
    public int top() {
        if (head != null) {
            return head.val;
        }
        throw new IllegalStateException("Stack is empty");
    }

    // Retrieves the minimum element from the stack
    public int getMin() {
        if (head != null) {
            return head.min;
        }
        throw new IllegalStateException("Stack is empty");
    }
}
